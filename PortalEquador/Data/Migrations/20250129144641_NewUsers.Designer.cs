// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortalEquador.Data;

#nullable disable

namespace PortalEquador.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250129144641_NewUsers")]
    partial class NewUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6d9ed3ff-bebb-42bc-ad07-0255bb0f7edb",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "7d9ed3ff-bebb-42bc-ad07-0255bb0f7edb",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        },
                        new
                        {
                            Id = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160",
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR"
                        },
                        new
                        {
                            Id = "e9f639de-624f-4a4e-b8bf-2381725462f1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "e9f639de-624f-4a4e-b8bf-2381725462f2",
                            Name = "DataManager",
                            NormalizedName = "DATAMANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "408aa945-3d84-4421-8342-7269ec64d949",
                            RoleId = "e9f639de-624f-4a4e-b8bf-2381725462f1"
                        },
                        new
                        {
                            UserId = "418aa945-3d84-4421-8342-7269ec64d949",
                            RoleId = "e9f639de-624f-4a4e-b8bf-2381725462f1"
                        },
                        new
                        {
                            UserId = "428aa945-3d84-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "438aa945-3d84-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "448aa945-3d84-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "1a2b3c4d-0001-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "2a2b3c4d-0002-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "3a2b3c4d-0003-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "4a2b3c4d-0004-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "5a2b3c4d-0005-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "6a2b3c4d-0006-4421-8342-7269ec64d949",
                            RoleId = "e9f639de-624f-4a4e-b8bf-2381725462f2"
                        },
                        new
                        {
                            UserId = "7a2b3c4d-0007-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "8a2b3c4d-0008-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "9a2b3c4d-0009-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "1b2b3c4d-0010-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        },
                        new
                        {
                            UserId = "2b2b3c4d-0011-4421-8342-7269ec64d949",
                            RoleId = "cc4fcb01-de88-4c20-b4ac-8df5c2a65160"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PortalEquador.Data.Curriculum.Entities.CurriculumEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.ToTable("CurriculumEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Document.Entity.DocumentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.Property<int?>("SubTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("EditorId");

                    b.HasIndex("PersonalInformationId");

                    b.HasIndex("SubTypeId");

                    b.ToTable("DocumentEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.DriversLicence.Entity.DriversLicenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProvisionalExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProvisionalRenewalNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("LicenceTypeId");

                    b.HasIndex("PersonalInformationId");

                    b.ToTable("DriversLicenceEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Education.School.Entity.SchoolEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DegreeId")
                        .HasColumnType("int");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("MajorId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("EditorId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("MajorId");

                    b.HasIndex("PersonalInformationId");

                    b.ToTable("SchoolEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Education.University.Entity.UniversityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DegreeId")
                        .HasColumnType("int");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("MajorId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("EditorId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("MajorId");

                    b.HasIndex("PersonalInformationId");

                    b.ToTable("UniversityEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Generic.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "408aa945-3d84-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a98bc73-361f-4348-ac8e-188021285cc4",
                            Email = "adminEquador@teste.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDCJ8x+BofjoOhk+iI0SrMTmVYnRXMDuovzxG9ZxQ0LN0e0jUtBN/Rs0Tze8XX9WIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa1f4f6d-6a74-432b-93b4-89b4ebc5300b",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "418aa945-3d84-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64f2420e-e7c3-45b6-af4f-7930fb873660",
                            Email = "aguiar@teste.com",
                            EmailConfirmed = true,
                            FirstName = "António",
                            LastName = "Aguiar",
                            LockoutEnabled = false,
                            NormalizedEmail = "AGUIAR@EQUADOR.COM",
                            NormalizedUserName = "AGUIAR@EQUADOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL37juexJPvgYVqSqrZPAfCx0SovWUpq2DibAdmfmwuu0Licoy1cfkxVqmOWydhzgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4de6d75-bc0d-4b49-a0af-15811586a753",
                            TwoFactorEnabled = false,
                            UserName = "aguiar@equador.com"
                        },
                        new
                        {
                            Id = "428aa945-3d84-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4fb637b-90f5-44d5-a55b-a5d3b4976554",
                            Email = "dovictor@equador.com",
                            EmailConfirmed = true,
                            FirstName = "Domingos",
                            LastName = "Victor",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOVICTOR@EQUADOR.COM",
                            NormalizedUserName = "DOVICTOR@EQUADOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC7z/z/s/tbQahJ1xqz8b/w0G5Vw8cqBM15Xs6ALRj75Dpmyzg9xpkAq4v88FFyhsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b8c61d7-1924-48d5-a7c5-9193049e585a",
                            TwoFactorEnabled = false,
                            UserName = "dovictor@equador.com"
                        },
                        new
                        {
                            Id = "438aa945-3d84-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddb0805e-d253-4db3-83ee-b4e16b18a13b",
                            Email = "manioca@equador.com",
                            EmailConfirmed = true,
                            FirstName = "Mateus",
                            LastName = "Nioca",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANIOCA@EQUADOR.COM",
                            NormalizedUserName = "MANIOCA@EQUADOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBZrJ3UQyLx9WKQyOO5WItUgRexQBwigPxDoos2nZSxV80AGyyCRMMXyOC0Yey7E/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e670717-8209-432b-955d-bcd20722828b",
                            TwoFactorEnabled = false,
                            UserName = "manioca@equador.com"
                        },
                        new
                        {
                            Id = "448aa945-3d84-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "351b7664-ab42-419d-9e33-308269eabdde",
                            Email = "lumira@equador.com",
                            EmailConfirmed = true,
                            FirstName = "Luís",
                            LastName = "Mira",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUMIRA@EQUADOR.COM",
                            NormalizedUserName = "LUMIRA@EQUADOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJT4I6M3MhQhbLpEETST5fUNe+BATAnw781rbBqgRIbg4s/CLJwOwLH4YV534M2ArQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e71d959d-ee3c-445c-9aa5-e28d3dc8d58b",
                            TwoFactorEnabled = false,
                            UserName = "lumira@equador.com"
                        },
                        new
                        {
                            Id = "1a2b3c4d-0001-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05916715-8356-44fb-845c-b1d8993ac227",
                            Email = "supervisor.cvx@equador.co.ao",
                            EmailConfirmed = true,
                            FirstName = "Lazáro",
                            LastName = "Mazuela",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERVISOR.CVX@EQUADOR.CO.AO",
                            NormalizedUserName = "SUPERVISOR.CVX@EQUADOR.CO.AO",
                            PasswordHash = "AQAAAAIAAYagAAAAEMUzEwF/cGNYLj77y547lOSVB6K08+xb11FFRVTAvmRT+/fZoX8fjTHEOHPNE9BeQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15fe569a-d501-4492-ae7a-b580f3f3ac9b",
                            TwoFactorEnabled = false,
                            UserName = "supervisor.cvx@equador.co.ao"
                        },
                        new
                        {
                            Id = "2a2b3c4d-0002-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36d97d25-b18d-407c-9a21-78a361077f45",
                            Email = "benedito.equador@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Benedito",
                            LastName = "Joaquim",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENEDITO.EQUADOR@GMAIL.COM",
                            NormalizedUserName = "BENEDITO.EQUADOR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKN41oqaSka//Q+wY5qP7X5fbw4DKps3MqQVOAbpOAfdZ0wW2Lt72BhA67J3OzBWbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86b26ee8-395e-414c-a60a-ae2211a0dd43",
                            TwoFactorEnabled = false,
                            UserName = "benedito.equador@gmail.com"
                        },
                        new
                        {
                            Id = "3a2b3c4d-0003-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03025b15-f5b6-4615-abf6-da95a63c26f5",
                            Email = "pascoaljose79@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Pascoal",
                            LastName = "José",
                            LockoutEnabled = false,
                            NormalizedEmail = "PASCOALJOSE79@GMAIL.COM",
                            NormalizedUserName = "PASCOALJOSE79@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEODBsQ/x5OX+OZUtOeUp3iVaRfQnrcQcQnAurXfP0oVgsoqMdZZlgvFKCgPIzifJFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7219adfb-f1fa-4b57-9f9b-cb17c1757089",
                            TwoFactorEnabled = false,
                            UserName = "pascoaljose79@gmail.com"
                        },
                        new
                        {
                            Id = "4a2b3c4d-0004-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2e31afb-e29e-4cb1-a994-53eeb75db6ba",
                            Email = "manuellima171@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Manuel",
                            LastName = "Lima",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANUELLIMA171@HOTMAIL.COM",
                            NormalizedUserName = "MANUELLIMA171@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFkx5gXr4Pgs9h9rVz3F9N91wkB4QKWAmTfyZH6reVhp5eMcwVP++jwP45HicZwcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0534e9de-5f88-44a6-afe6-1a51c07e7534",
                            TwoFactorEnabled = false,
                            UserName = "manuellima171@hotmail.com"
                        },
                        new
                        {
                            Id = "5a2b3c4d-0005-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3a8e0ed-018d-4f3a-9f9d-92289e3fed89",
                            Email = "GANT@equinor.com",
                            EmailConfirmed = true,
                            FirstName = "Gabriel",
                            LastName = "Antonio",
                            LockoutEnabled = false,
                            NormalizedEmail = "GANT@EQUINOR.COM",
                            NormalizedUserName = "GANT@EQUINOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDO/VcWdAMbcismrTJmnwh1TLOKtQJJSEykkYaCN9s8CN1jZbmhyepQhp+Gpb+V/Ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f247b23-9b82-452b-b58a-b62c61ba7edb",
                            TwoFactorEnabled = false,
                            UserName = "GANT@equinor.com"
                        },
                        new
                        {
                            Id = "6a2b3c4d-0006-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01cb462d-51e7-4038-bb73-7717c0d1f013",
                            Email = "Trindadeluis60@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trindade",
                            LastName = "Luis",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRINDADELUIS60@GMAIL.COM",
                            NormalizedUserName = "TRINDADELUIS60@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOObsE84Ac+SE1YVScxixUN9pXt/0copH7tPjToY1RJS1YHZz84IqATCgkFx9Z38ww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff2e35a2-3acc-4377-8942-1a53a04c9aa0",
                            TwoFactorEnabled = false,
                            UserName = "Trindadeluis60@gmail.com"
                        },
                        new
                        {
                            Id = "7a2b3c4d-0007-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7867621b-a75d-4431-9b94-41d2486aa2e2",
                            Email = "fleetbp.one@equador.co.ao",
                            EmailConfirmed = true,
                            FirstName = "Almeida",
                            LastName = "Inorio",
                            LockoutEnabled = false,
                            NormalizedEmail = "FLEETBP.ONE@EQUADOR.CO.AO",
                            NormalizedUserName = "FLEETBP.ONE@EQUADOR.CO.AO",
                            PasswordHash = "AQAAAAIAAYagAAAAEMS/dCsxQBylx+DvzoYS09lxs4XWYty0JEnIZWY4U49weX/wN38bMklS91aTXjDsLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "805f98b0-cdf0-46b7-82ca-548edfa8c932",
                            TwoFactorEnabled = false,
                            UserName = "fleetbp.one@equador.co.ao"
                        },
                        new
                        {
                            Id = "8a2b3c4d-0008-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c83d1ce4-813f-4f00-898f-0ca767026e5d",
                            Email = "fleetbp.two@equador.co.ao",
                            EmailConfirmed = true,
                            FirstName = "Alfredo",
                            LastName = "Matos",
                            LockoutEnabled = false,
                            NormalizedEmail = "FLEETBP.TWO@EQUADOR.CO.AO",
                            NormalizedUserName = "FLEETBP.TWO@EQUADOR.CO.AO",
                            PasswordHash = "AQAAAAIAAYagAAAAEBQoi+ZqfFLTTNaj7cuLUlpy0xe9LvB2CXpUEf05FHNfvmC0udrqNbMAFTTyeRvtgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "733fc68a-e2fb-4c64-aeca-09e49d82b7dd",
                            TwoFactorEnabled = false,
                            UserName = "fleetbp.two@equador.co.ao"
                        },
                        new
                        {
                            Id = "9a2b3c4d-0009-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8155cbc-0dd5-4238-89da-fc4faa41e24e",
                            Email = "fleetbp.three@equador.co.ao",
                            EmailConfirmed = true,
                            FirstName = "Ilisio",
                            LastName = "dos Santos",
                            LockoutEnabled = false,
                            NormalizedEmail = "FLEETBP.THREE@EQUADOR.CO.AO",
                            NormalizedUserName = "FLEETBP.THREE@EQUADOR.CO.AO",
                            PasswordHash = "AQAAAAIAAYagAAAAEITKps5ScauCdiMkBMShDS5S4+kUX5sD/fWK66clmXf+14pJI+z7qPn4Im6qaqOu8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7998768c-c54b-4c54-b03c-e2cc5c1bd558",
                            TwoFactorEnabled = false,
                            UserName = "fleetbp.three@equador.co.ao"
                        },
                        new
                        {
                            Id = "1b2b3c4d-0010-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "001defb8-fe65-44f2-a9aa-22e437b1e69d",
                            Email = "armandosuca@etuenergias.co.ao",
                            EmailConfirmed = true,
                            FirstName = "Armando",
                            LastName = "Suca",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARMANDOSUCA@ETUENERGIAS.CO.AO",
                            NormalizedUserName = "ARMANDOSUCA@ETUENERGIAS.CO.AO",
                            PasswordHash = "AQAAAAIAAYagAAAAEOyK78rCsbD+3KwCCRpiEZXe2sGpuB9KTSJd/D7MyAYFVFkPikQee2X4rGe3JEeNVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a52e7b1-52f4-494f-8d8a-8e5111666881",
                            TwoFactorEnabled = false,
                            UserName = "armandosuca@etuenergias.co.ao"
                        },
                        new
                        {
                            Id = "2b2b3c4d-0011-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d7afcc4-3466-42e3-9a29-c2ed345cb83d",
                            Email = "magalhaes.equador@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "João",
                            LastName = "Magalhães",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAGALHAES.EQUADOR@GMAIL.COM",
                            NormalizedUserName = "MAGALHAES.EQUADOR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHEtX1NWPcw25ub6d4sBK5McHICaEBou2N8K5jXYvD7UbKGsvKngRYSeIn2ta7vB+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "31e667d8-b9eb-4829-9e26-8337a437f77f",
                            TwoFactorEnabled = false,
                            UserName = "magalhaes.equador@gmail.com"
                        });
                });

            modelBuilder.Entity("PortalEquador.Data.GroupTypes.entities.GroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.ToTable("GroupEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GroupEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("GroupEntityId");

                    b.ToTable("GroupItemEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Languages.entity.LanguageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsMaternalLanguage")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("OralLevelId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.Property<int>("WrittenLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OralLevelId");

                    b.HasIndex("PersonalInformationId");

                    b.HasIndex("WrittenLevelId");

                    b.ToTable("LanguageEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.MechanicalWorkshop.Admin.Entity.AdminMechanicalWorkShopContractEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("EditorId");

                    b.ToTable("AdminMechanicalWorkShopContractEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.MechanicalWorkshop.CarWash.Entity.CarWashSchedulerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentState")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InterventionTimeId")
                        .HasColumnType("int");

                    b.Property<int>("LaneId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ScheduleDate")
                        .HasColumnType("date");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("EditorId");

                    b.HasIndex("InterventionTimeId");

                    b.HasIndex("LaneId");

                    b.HasIndex("VehicleId");

                    b.ToTable("CarWashSchedulerEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.MechanicalWorkshop.Scheduler.Entity.MechanicalWorkshopSchedulerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentState")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InterventionTimeId")
                        .HasColumnType("int");

                    b.Property<int>("MechanicId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ScheduleDate")
                        .HasColumnType("date");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("EditorId");

                    b.HasIndex("InterventionTimeId");

                    b.HasIndex("MechanicId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MechanicalWorkshopSchedulerEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.MechanicalWorkshop.Vehicle.Entity.MechanicalWorkshopVehicleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LicencePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("EditorId");

                    b.ToTable("MechanicalWorkshopVehicleEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.PersonalInformation.Entity.PersonalInformationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IdentityCardExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("MotherTongueId")
                        .HasColumnType("int");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int>("NeighbourhoodId")
                        .HasColumnType("int");

                    b.Property<string>("Nif")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("MotherTongueId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("NeighbourhoodId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("PersonalInformationEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Profession.Competence.Entity.ProfessionalCompetenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompetenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("EditorId");

                    b.HasIndex("PersonalInformationId");

                    b.ToTable("ProfessionalCompetenceEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Profession.Experience.Entity.ProfessionalExperienceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.Property<int>("WorkstationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EditorId");

                    b.HasIndex("PersonalInformationId");

                    b.HasIndex("WorkstationId");

                    b.ToTable("ProfessionalExperienceEntity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalEquador.Data.Curriculum.Entities.CurriculumEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Document.Entity.DocumentEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "DocumentTypeGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.PersonalInformation.Entity.PersonalInformationEntity", "PersonalInformationEntity")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "SubTypeGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("SubTypeId");

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("DocumentTypeGroupItemEntity");

                    b.Navigation("PersonalInformationEntity");

                    b.Navigation("SubTypeGroupItemEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.DriversLicence.Entity.DriversLicenceEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "LicenceTypeGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("LicenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.PersonalInformation.Entity.PersonalInformationEntity", "PersonalInformationEntity")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("LicenceTypeGroupItemEntity");

                    b.Navigation("PersonalInformationEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Education.School.Entity.SchoolEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "DegreeGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "InstitutionGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "MajorGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("MajorId");

                    b.HasOne("PortalEquador.Data.PersonalInformation.Entity.PersonalInformationEntity", "PersonalInformationEntity")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("DegreeGroupItemEntity");

                    b.Navigation("InstitutionGroupItemEntity");

                    b.Navigation("MajorGroupItemEntity");

                    b.Navigation("PersonalInformationEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Education.University.Entity.UniversityEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "DegreeGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "InstitutionGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "MajorGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.PersonalInformation.Entity.PersonalInformationEntity", "PersonalInformationEntity")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("DegreeGroupItemEntity");

                    b.Navigation("InstitutionGroupItemEntity");

                    b.Navigation("MajorGroupItemEntity");

                    b.Navigation("PersonalInformationEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.GroupTypes.entities.GroupEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupEntity", "GroupEntity")
                        .WithMany()
                        .HasForeignKey("GroupEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("GroupEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Languages.entity.LanguageEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "LanguageGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "OralLevelGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("OralLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.PersonalInformation.Entity.PersonalInformationEntity", "PersonalInformationEntity")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "WrittenLevelGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("WrittenLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("LanguageGroupItemEntity");

                    b.Navigation("OralLevelGroupItemEntity");

                    b.Navigation("PersonalInformationEntity");

                    b.Navigation("WrittenLevelGroupItemEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.MechanicalWorkshop.Admin.Entity.AdminMechanicalWorkShopContractEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "ContractGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("ContractGroupItemEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.MechanicalWorkshop.CarWash.Entity.CarWashSchedulerEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "ContractGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "InterventionTimeGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("InterventionTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "LaneGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("LaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.MechanicalWorkshop.Vehicle.Entity.MechanicalWorkshopVehicleEntity", "VehicleEntity")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("ContractGroupItemEntity");

                    b.Navigation("InterventionTimeGroupItemEntity");

                    b.Navigation("LaneGroupItemEntity");

                    b.Navigation("VehicleEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.MechanicalWorkshop.Scheduler.Entity.MechanicalWorkshopSchedulerEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "ContractGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "InterventionTimeGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("InterventionTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "MechanicGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.MechanicalWorkshop.Vehicle.Entity.MechanicalWorkshopVehicleEntity", "VehicleEntity")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("ContractGroupItemEntity");

                    b.Navigation("InterventionTimeGroupItemEntity");

                    b.Navigation("MechanicGroupItemEntity");

                    b.Navigation("VehicleEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.MechanicalWorkshop.Vehicle.Entity.MechanicalWorkshopVehicleEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "ContractGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("ContractGroupItemEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.PersonalInformation.Entity.PersonalInformationEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "MaritalStatusIdGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "MotherTongueGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("MotherTongueId");

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "NationalityGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "NeighbourhoodGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("NeighbourhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "ProvinceGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("MaritalStatusIdGroupItemEntity");

                    b.Navigation("MotherTongueGroupItemEntity");

                    b.Navigation("NationalityGroupItemEntity");

                    b.Navigation("NeighbourhoodGroupItemEntity");

                    b.Navigation("ProvinceGroupItemEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Profession.Competence.Entity.ProfessionalCompetenceEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "CompetenceGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.PersonalInformation.Entity.PersonalInformationEntity", "PersonalInformationEntity")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("CompetenceGroupItemEntity");

                    b.Navigation("PersonalInformationEntity");
                });

            modelBuilder.Entity("PortalEquador.Data.Profession.Experience.Entity.ProfessionalExperienceEntity", b =>
                {
                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "CompanyGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.Generic.ApplicationUser", "ApplicationUserEntity")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.PersonalInformation.Entity.PersonalInformationEntity", "PersonalInformationEntity")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalEquador.Data.GroupTypes.entities.GroupItemEntity", "WorkstationGroupItemEntity")
                        .WithMany()
                        .HasForeignKey("WorkstationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserEntity");

                    b.Navigation("CompanyGroupItemEntity");

                    b.Navigation("PersonalInformationEntity");

                    b.Navigation("WorkstationGroupItemEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
